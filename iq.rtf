{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil Calibri;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 What Is Requirement Traceability Matrix?\par
Answer.\par
\par
Requirement Traceability Matrix (RTM) is a document which records the mapping between the high-level requirements and the test cases in the form of a table.\par
\par
That\rquote s how it ensures that the Test Plan covers all the requirements and links to their latest version.\par
\par
Q-2. Explain The Difference Between Pilot And Beta Testing?\par
Answer. Read the following points to know the difference between Pilot and Beta testing.\par
\par
1. We do the beta test when the product is about to release to the customer whereas pilot testing takes place in the earlier phase of the development cycle.\par
2. In the beta test, testing application is given to few users to make sure that application meet the customer requirements and does not contain any showstopper bug. Whereas, in the pilot test, few members of the testing team work at the Customer site to set up the product. They give their feedback also to improve the quality of the end product.\par
\par
Q-3. Describe How To Perform Risk Analysis During Software Testing?\par
Answer. Risk analysis is the process of identifying the hidden issues that may derail the successful delivery of the application. It also prioritizes the sequence of resolving the identified risks for testing purpose.\par
\par
Following are some of the risks that are of concern to the QA.\par
\par
1. New Hardware.\par
2. New Technology.\par
3. New Automation Tool.\par
4. The sequence of code delivery.\par
5. Availability of test resources for the application.\par
\par
We prioritize them into three categories which are as follows.\par
\par
1. High magnitude: Impact of the bug on the other functionality of the application.\par
2. Medium: it is tolerable in the application but not desirable.\par
3. Low: it is tolerable. This type of risk has no impact on the company business.\par
\par
Q-4. What Is Silk Test And Why Should You Use It?\par
Answer. Here are some facts about the Silk tool.\par
\par
1. It\rquote s a tool developed for performing the regression and functionality testing of the application.\par
2. It benefits when we are testing Window based, Java, the web, and the traditional client/server applications.\par
3. Silk Test help in preparing the test plan and managing them to provide the direct accessing of the database and validation of the field.\par
\par
Q-5. What Is The Difference Between Master Test Plan And Test Plan?\par
Answer. The difference between Master Plan and Test Plan can be described using following points.\par
\par
1. Master Test Plan contains all the test scenarios and risks prone areas of the application. Whereas, Test Plan document contains test cases corresponding to test scenarios.\par
2. Master Test Plan captures each and every test to be run during the overall development of application whereas test plan describes the scope, approach, resources and schedule of performing the test.\par
3. MTP includes test scenarios to be executed in all the phases of testing that run during the complete life cycle of the application development. Whereas, a separate Test Plan exists for each phase of testing like Unit, Functional, and System which contains the test cases related to that type only.\par
4. Only for big projects, we need a Master Test Plan which requires execution in all phases of testing. However, preparing a basic Test Plan is enough for small projects.\par
\par
Q-6. How Do You Handle A Non-Reproducible Bug?\par
Answer. Following bugs lie under the non-reproducible category.\par
\par
1. Defects observed due to low memory issue.\par
2. Bugs raised due to address pointing to a memory location that does not exist.\par
3. The race condition is an error scenario which occurs when the timing of one event impacts another executing in a sequence.\par
\par
A tester can take the following actions to handle the non-reproducible bugs.\par
\par
1. Execute test steps that are close to the error description.\par
2. Evaluate the test environment.\par
3. Examine and evaluate test execution results.\par
4. Keep the resources & time constraints under check.\par
\par
Q-7. How Do You Perform Automated Testing In Your Environment?\par
Answer. Automation Testing is a process of executing tests automatically. It reduces the human intervention to a great extent. We use different test automation tools like QTP, Selenium, and WinRunner. These tools help in speeding up the testing tasks.\par
\par
Using the above tools we can create test scripts to verify the application automatically. After completing the test execution, these tools also generate the test reports.\par
\par
Q-8. What Are The Factors That You\rquote ll Consider To Choose Automated Testing Over Manual Testing?\par
Answer.\par
\par
The choice of automated testing over manual testing depends on the following factors.\par
\par
1. Tests require periodic execution.\par
2. Tests include repetitive steps.\par
3. Tests execute in a standard runtime environment.\par
4. Automation is expected to take less time.\par
5. Automation is increasing reusability.\par
6. Automation reports are available for every execution.\par
7. Small releases like service packs which include a minor bug fix. In such cases, regression type of cases is sufficient for validation.\par
\par
Q-9. What Is The Difference Between A Test Driver And Test Stub?\par
Answer.\par
\par
The test driver is a piece of code that calls a software component under test. It is useful in testing that follows the bottom-up approach.\par
\par
Test stub is a dummy program that integrates with an application to complete its functionality. These are relevant for testing that uses the top-down approach.\par
\par
Let\rquote s take an example.\par
\par
1. Let\rquote s say there is a scenario to test the interface between modules A and B. We have developed only module-A. Then we can test module-A only if we have real module-B or a dummy module for it. In this case, we call module-B as the Test Stub.\par
2. Now, module-B can\rquote t send or receive data directly from module-A. In such scenario, we\rquote ve to move data from one module to another using some external features called Test Driver.\par
\par
Q-10. What Are The Essential Qualities Of An Experienced QA Or Test Lead?\par
Answer. Every QA or Test Lead should have the following qualities.\par
\par
1. Well-versed in Software testing processes.\par
2. Ability to accelerate teamwork to increase productivity.\par
3. Improve coordination between QA and Dev engineers.\par
4. Provide ideas to refine the QA processes.\par
5. Ability to conduct RCA meetings and draw conclusions.\par
6. Excellent written and interpersonal communication skills.\par
7. Quick learner and able to groom the team members.\par
\par
Q-11. What Are The Different Types Of Software Testing?\par
Answer. Following is the list of various testing types used by manual testers.\par
\par
Unit testing\par
Integration testing\par
Regression testing\par
Shakeout testing\par
Smoke testing\par
Functional testing\par
Performance testing\par
Load testing\par
stress testing\par
Endurance testing\par
White box and Black box testing\par
Alpha and Beta testing\par
System testing\par
\f1\u-10179?\u-9055?\f0  Recommended \f2\endash  Must Know Interview Questions for SSE/Test Lead.\par
\par
Q-12. What Are The Key Elements Of A Test Plan?\par
Answer. A test plan contains the following main points.\par
\par
Testing objectives.\par
Test scope.\par
Testing the frame.\par
The environment\par
Reason for testing\par
The criteria for entrance and exit\par
Deliverables\par
Risk factors\par
Q-13. What Is A Test Case?\par
Answer.\par
\par
A test case is a sequence of actions and observations that are used to verify the desired functionality. A good test case helps to identify problems in the requirements or design of an application.\par
\par
Q-14. What Is Agile Testing And Why Is It Important?\par
Answer. Agile testing is a software testing process which evaluates a software from the customer point of view. And it is important because this does not require Dev to complete coding for starting QA. Instead, the coding and testing both goes hand in hand. However, it may require continuous customer interaction.\par
\par
Q-15. How Do You Test A Product If The Requirements Are Yet To Freeze?\par
Answer. If the requirement spec is not available for a product, then a test plan can be created based on the assumptions made about the product. But we should get all assumptions well documented in the test plan.\par
\par
Q-16. How Will You Tell If Enough Test Cases Have Been Created To Test A Product?\par
Answer. First of all, we\rquote ll check if every requirement has at least one test case covered. If yes, then we can say that there are enough test cases to test the product.\par
\par
Q-17. What Will You Do When A Bug Turns Up During Testing?\par
Answer. When a bug shows up, we can follow the below steps.\par
\par
Run more tests to make sure that the problem has a clear description.\par
Run a few more tests to ensure that the same problem doesn\rquote t exist with different inputs.\par
Once we are sure of the full scope of the bug, then we can add details and report it.\par
Q-18. If A Product Is In Production And One Of Its Modules Gets Updated, Then Is It Necessary To Retest?\par
Answer. It is advisable to perform regression testing and run tests for all of the other modules as well. Finally, the QA should carry out the System testing.\par
\par
Q-19. What Is The Difference Between Functional Requirement And Non-Functional Requirement?\par
Answer. The functional requirement specifies how a product should run whereas a non-functional requirement represents how it should be.\par
\par
Functional Requirements.\par
Authentication\par
Business rules\par
Historical Data\par
Legal and Regulatory Requirements\par
External Interfaces\par
Non-Functional Requirements.\par
Performance\par
Reliability\par
Security\par
Recovery\par
Data Integrity\par
Usability\par
Q-20. How Comes The Severity And Priority Relate To Each Other?\par
Answer.\par
\par
Severity \endash  Represents the gravity/depth of the bug.\par
Priority \endash  Specifies which bug should get fixed first.\par
Severity \endash  Describes the application point of view.\par
Priority \endash  Defines the user\rquote s point of view.\par
Q-21. What Are Different Types Of Severity?\par
Answer. The severity of a bug can be low, medium or high depending on the context.\par
\par
User Interface Defect \endash  Low\par
Boundary Related Defects \endash  Medium\par
Error Handling Defects \endash  Medium\par
Calculation Defects \endash  High\par
Misinterpreted Data \endash  High\par
Hardware Failures \endash  High\par
Compatibility Issues \endash  High\par
Control Flow Defects \endash  High\par
Load Conditions (Memory leakages under load testing) \endash  High\par
Q-22. What Is Entry And Exit Criteria In Software Testing?\par
Answer.\par
\par
Entry criteria \endash  It is a process that should run when a system begins. It includes the following artifacts.\par
\par
SRS (Software Requirement Specification)\par
FRS (Functional Requirement Specification)\par
Use case\par
Test-Case\par
Test-plan\par
Exit Criteria \endash  It signals when the testing should complete and when should the product be ready to release. It includes the following artifacts.\par
\par
Test Summary Report\par
Metrics\par
Defect Analysis report\par
Q-23. What Is Test Strategy?\par
Answer. Test strategy is an approach to carry out the testing activity. It covers the following.\par
\par
Roles and responsibilities for each member.\par
Testing scope.\par
Test tools.\par
Test environment.\par
Testing schedule.\par
Associated risks.\par
Q-24. What Is Smoke Testing And What Is Sanity?\par
Answer.\par
\par
Smoke testing confirms the basic functionality works for a product. It requires you to identify the most basic test cases for execution.\par
\par
Sanity testing, on the other hand, ensures that the product runs without any logical errors. For example, if we are testing a calculator app; we may multiply a number by 3 and check whether the sum of the digits of the answer is divisible by 3.\par
\par
Q-25. What Is The Difference Between A Bug, Defect, And Error?\par
Answer. A bug is usually same as the defect. Both of them represents an unexpected behavior of the software.\par
\par
However, an error would also fall in the same category. But in some cases, errors are fixed values. For example \endash  404/405 errors in HTML pages.\par
\par
\f1\u-10179?\u-9055?\f0  Also Read \f2\endash  Software Testing Interview Questions and Answers \endash  Part1.\par
\par
Q-26. What Is The Difference Between High Level And Low-Level Test Case?\par
Answer.\par
\par
High-level test cases cover the core functionality of a product like standard business flows.\par
Low-level test cases are those related to user interface (UI) in the application.\par
Q-27. What Is The Difference Between Static Testing And Dynamic Testing?\par
Answer.\par
\par
Static Testing.\par
It is a white box testing technique which directs the developers to verify their code with the help of checklist to find errors in it.\par
Developers can start it done without actually finalizing the application or program.\par
Static testing is more cost effective than Dynamic testing.\par
It covers more areas than Dynamic testing in a shorter time.\par
Dynamic Testing.\par
Dynamic testing involves the execution of an actual application with valid inputs and checking of the expected output.\par
Examples of Dynamic testing are Unit Testing, Integration Testing, System Testing and Acceptance Testing.\par
Dynamic testing happens after the code deployment.\par
It starts during the validation stage.\par
Q-28. What Is Test Harness?\par
Answer.\par
\par
Test Harness requires configuring a set of tools and input data to test an application under various conditions. It involves monitoring the actual output with expected output for correctness.\par
\par
Its benefits are as follows.\par
\par
Upward push in productivity due to process automation.\par
Improve the overall product Quality.\par
Q-29. What Is Defect Leakage?\par
Answer.\par
\par
Defect leakage occurs at the Customer or the End-user side after the product delivery. If the end user sees any issue in the application, then such bugs lead to Defect leakage. And this process of finding bugs is also called as Bug Leakage.\par
\par
Q-30. What Kind Of Document Will You Need To Begin Functional Testing?\par
Answer.\par
\par
It is none other than the Functional specification document. It defines the full functionality of a product.\par
Other documents are also useful in testing like user manual and BRS.\par
Gap analysis is another document which can help in understanding the expected and existing system.\par
Q-31. Beside Test Case & Test Plan, What Documents A Tester Should Produce?\par
Answer. Here are a few other documents to prepare.\par
\par
Testing metrics\par
Test design specs\par
End-to-end scenarios\par
Test summary reports\par
Bug reports\par
Q-32. What Is Business Requirements Document (BRD)?\par
Answer. BRD provides a detailed business solution for a project including the documentation of customer needs and expectations.\par
\par
BRD fulfills the following objectives.\par
\par
Gain agreement with stakeholders.\par
Provide clarity on the business requirements.\par
Describe the solution that meets the customer/business needs.\par
Determine the input for the next phase of the project.\par
Q-33. What Is Risk Analysis?\par
Answer. Risk analysis is a technique to identify the things that can go wrong in a software development project. They can negatively impact the scope, quality, timeliness, and cost of a project.\par
\par
However, everyone involved in the project has a part in minimizing the risk. But it\rquote s the lead who ensures that whole team understands the individual role in managing the risk.\par
\par
Q-34. What Is Exploratory Testing?\par
Answer.\par
\par
Exploratory testing is a process which lets a tester to concentrate more on execution and less on planning.\par
\par
It requires formulating a test charter, a short declaration of the scope, set of objectives and possible approaches to be used.\par
The test design and test execution activities may run in parallel without formally documenting the test conditions, test cases or test scripts.\par
Testers can use boundary value analysis to concentrate the testing effort on error-prone areas by accurately pinpointing the boundaries.\par
Notes should be recorded for the Exploratory Testing sessions as it would help to create a final report of its execution.\par
Q-35. Can We Do System Testing At Any Stage?\par
Answer. No. The system testing should start only if all modules arc in place and work correctly. However, it should happen before the UAT (User Acceptance testing).\par
\par
Q-36. Why Is It Impossible To Test A Program Completely?\par
Answer.\par
\par
Here are the two principal reasons that make it impossible to test a program entirely.\par
\par
Software specifications can be subjective and can lead to different interpretations.\par
A software program may require too many inputs, too many outputs, and too many path combinations to test.\par
Q-37. What Is The Primary Difference Between Debugging & Testing?\par
Answer.\par
\par
Testing is to find out defects while using a product whereas debugging is to reach the part of the code causing failure.\par
Debugging is isolating the problem area in the code done by a developer whereas Testing is identifying the bug in an application and done by a tester.\par
Q-38. What Are The Roles Of Glass-Box And Black-Box Testing Tools?\par
Answer.\par
\par
Black-Box Testing.\par
It doesn\rquote t require the knowledge of internal design or code. So the tests are based on requirements and functionality. Black box testing focuses on finding the following errors.\par
\par
Interface errors\par
Performance errors\par
Initialization errors\par
Incorrect or missing functionality\par
Errors in accessing external database\par
Glass-Box Testing Or White-Box Testing.\par
It requires familiarity with the internal design and application code. So the tests concentrate on path coverage, branch coverage, and statement coverage. It is expected to cover the following.\par
\par
All possible code flows of a module.\par
Execute all loops.\par
Exercise all logical decisions.\par
Verify internal data structure to ensure their validity.\par
Q-39. What Is GAP Analysis?\par
Answer. Gap analysis reveals any deviation between the features available for testing and how the customer perceives them to be.\par
\par
Traceability matrix is a testing tool which testers can use to track down the gaps.\par
\par
Q-40. How Do We Know The Code Has Met Specifications?\par
Answer. Traceability matrix is an intuitive tool which ensures the requirements mapped to the test cases. And when the execution of all test cases finishes with success, it indicates that the code has met the requirements.\par
\par
\f1\u-10179?\u-9055?\f0  Must Read \f2\endash  Software Testing Interview Questions and Answers \endash  Part2.\par
\par
Q-41. Is It Possible To Achieve 100% Coverage Of Testing? How Would You Ensure It?\par
Answer. No, it\rquote s not possible to perform 100% testing of any product. But you can follow the below steps to come closer.\par
\par
Set a hard limit on the following factors.\par
Percentage of test cases to be passed.\par
The no. of bug found.\par
Set a red flag if,\par
Test budget depleted.\par
Deadlines breached.\par
Set a green flag if,\par
The entire functionality gets covered in test cases.\par
All critical & high bugs must have a status of CLOSED.\par
Q-42. What Are Error Guessing And Error Seeding?\par
Answer.\par
\par
Error Guessing.\par
It is a test case design technique in which testers have to guess the defects that might occur and write test cases to represent them.\par
\par
Error Seeding.\par
It is the process of adding known bugs in a program for the tracking the rate of detection & removal. It also helps to estimate the number of faults remaining in the program.\par
\par
Q-43. What Is The Difference Between Coupling And Cohesion?\par
Answer. The difference between coupling and cohesion is as follows.\par
\par
Cohesion is the degree which measures the dependency of the software component that combines related functionality into a single unit whereas coupling represents the binding of related functionality into a different unit.\par
Cohesion deals with the functionality that relates to different process within a single module whereas coupling deals with how much one module is dependent on the other modules within the product.\par
It is a good practice to increase the cohesion between the software whereas coupling is discouraged.\par
Q-44. What Is CMM?\par
Answer. The Capability Maturity Model for Software (CMM or SW-CMM) is a model for assessing the maturity of the software processes of an organization and for identifying the key practices that increase the maturity of these processes.\par
\par
Q-45. What Is Cause Effect Graph?\par
Answer. It is a graphical representation of inputs and the associated outputs effects which assist in designing test cases.\par
\par
Q-46. Why Does Software Have Bugs?\par
Answer.\par
\par
Miscommunication.\par
Programming errors.\par
Timeline pressures.\par
Change in requirements.\par
Software complexity.\par
Q-47. What Is Ramp Testing?\par
Answer. It is a testing method which proposes to raise an input signal until the system breaks down.\par
\par
Q-48. What Is Recovery Testing?\par
Answer. It ensures that the program must recover from any expected or unexpected events without loss of data or functionality.\par
\par
Events could be like shortage of disk space, unexpected loss of communication, or power out conditions.\par
\par
Q-49. What Is Inspection?\par
Answer. It\rquote s a group review quality improvement process for the product documents. It focuses on the following two aspects.\par
\par
Product document improvement.\par
Process improvement (of both document production and inspection).\par
Q-50. What Is Globalization Testing?\par
Answer. Globalization testing concentrates on detecting the potential problems in the product design that could spoil globalization. It certifies that the code can handle the desired international support without breaking any functionality. And also, it ensures that there would be no data loss and display problems.\par
\par
What is baseline testing?\par
Baseline testing is the process of running a set of tests to capture performance information. Baseline testing use the information collected to made the changes in the application to improve performance and capabilities of the application. Baseline compares present performance of application with its own previous performance.\par
What is benchmark testing?\par
Benchmarking testing is the process of comparing application performance with respect to industry standard which is given by some other organization. Benchmark informs us where our application stands with respect to others. Benchmark compares our application performance with other company\rquote s application\rquote s performance.\par
What is verification and validation?\par
Verification: process of evaluating work-products of a development phase to determine whether they meet the specified requirements for that phase.\par
\par
Validation: process of evaluating software during or at the end of the development process to determine whether it specified requirements.\par
\par
Difference between Verification and Validation:\par
\par
- Verification is Static Testing where as Validations is Dynamic Testing.\par
- Verification takes place before validation.\par
- Verification evaluates plans, document, requirements and specification, where as Validation evaluates product.\par
- Verification inputs are checklist, issues list, walkthroughs and inspection ,where as in Validation testing of actual product.\par
- Verification output is set of document, plans, specification and requirement documents where as in Validation actual product is output.\par
Explain Branch Coverage and Decision Coverage.\par
- Branch Coverage is testing performed in order to ensure that every branch of the software is executed atleast. To perform the Branch coverage testing we take the help of the Control Flow Graph. \par
\par
- Decision coverage testing ensures that every decision taking statement is executed atleast once.\par
\par
- Both decision and branch coverage testing is done to ensure the tester that no branch and decision taking statement, will not lead to failure of the software.\par
\par
- To Calculate Branch Coverage:\par
Branch Coverage = Tested Decision Outcomes / Total Decision Outcomes.\par
What is difference between Retesting and Regression testing?\par
The differences between Retesting and Regression testing are below:\par
\par
- Retesting is done to verify defect fix previous in now working correctly where as regression is perform to check if the defect fix have not impacted other functionality that was working fine before doing changes in the code.\par
\par
- Retesting is specific and is performed on the bug which is fixed where as in regression is not be always specific to any defect fix it is performed when any bug is fixed.\par
\par
- Retesting concern with executing those test cases that are failed earlier where as regression concern with executing test cases that was passed in earlier builds.\par
\par
- Retesting has higher priority over regression.\par
What is Mutation testing & when can it be done?\par
Mutation testing is a performed to find out the defect in the program. It is performed to find put bugs in specific module or component of the application. Mutation testing is based on two assumptions:\par
\par
Competent programmer hypothesis: according this hypothesis we suppose that program write the correct code of the program.\par
Coupling effect: according to this effect collection of different set of test data can also find large and complex bugs.\par
In this testing we insert few bugs into program to examine the optimal test inputs.\par
What is severity and priority of bug? Give some example.\par
Priority: concern with application from the business point of view.\par
\par
It answers: How quickly we need to fix the bug? Or how soon the bug should get fixed?\par
Severity: concern with functionality of application. \par
\par
How much the bug is affecting the functionality of the application?\par
\par
Ex.\par
\par
1. High Priority and Low Severity:\par
If a company logo is not properly displayed on their website.\par
\par
2. High Priority and High Severity:\par
Suppose you are doing online shopping and filled payment information, but after submitting the form, you get a message like "Order has been cancelled."\par
\par
3. Low Priority and High Severity:\par
If we have a typical scenario in which the application get crashed, but that scenario exists rarely.\par
\par
4. Low Priority and Low Severity:\par
There is a mistake like "You have registered success" instead of successfully, success is written.\par
Explain bug leakage and bug release.\par
Bug Leakage: When customer or end user discovered a bug which can be detected by the testing team. Or when a bug is detected which can be detected in pervious build then this is called as Bug Leakage.\par
\par
Bug release: is when a build is handed to testing team with knowing that defect is present in the release. The priority and severity of bug is low. It is done when customer want the application on the time. Customer can tolerate the bug in the released then the delay in getting the application and the cost involved in removing that bug. These bugs are mentioned in the Release Notes handed to client for the future improvement chances.\par
What is alpha and beta testing?\par
Alpha testing: is performed by the IN-House developers. After alpha testing the software is handed over to software QA team, for additional testing in an environment that is similar to the client environment. \par
\par
Beta testing: beta testing becomes active. It is performed by end user. So that they can make sure that the product is bug free or working as per the requirement. IN-house developers and software QA team perform alpha testing. The public, a few select prospective customers or the general public performs beta testing.\par
What is Monkey testing?\par
Monkey testing is a type of Black Box Testing used mostly at the Unit Level. In this tester enter the data in any format and check the software is not crashing. In this testing we use Smart monkey and Dumb monkey.\par
\par
Smart monkeys are used for load and stress testing, they will help in finding the bugs. They are very expensive to develop.\par
\par
Dumb monkey, are important for basic testing. They help in finding those bugs which are having high severity. Dumb monkey are less expensive as compare to Smart monkeys.\par
\par
Example: In phone number filed Symbols are entered.\par
What is test driver and test stub?\par
- The Stub is called from the software component to be tested. It is used in top down approach.\par
- The driver calls a component to be tested. It is used in bottom up approach.\par
- Both test stub and test driver are dummy software components.\par
\par
We need test stub and test driver because of following reason:\par
\par
- Suppose we want to test the interface between modules A and B and we have developed only module A. So we cannot test module A but if a dummy module is prepare, using that we can test module A.\par
\par
- Now module B cannot send or receive data from module A directly so, in these cases we have to transfer data from one module to another module by some external features. This external feature used is called Driver.\par
What is random testing?\par
When tester performs testing of application by using random input from the input domain of the system, this is Random Testing. \par
\par
Random testing involve following procedures:\par
\par
- Selection of input domain.\par
- Randomly selecting any input from input domain.\par
- Using these test input testing of application is performed.\par
- The results are compared to the system specification. The test is a failure if any input leads to incorrect results, otherwise it is a success.\par
What is Agile Testing?\par
Agile Testing means to quickly validation of the client requirements and make the application of good quality user interface. When the build is released to the testing team, testing of the application is started to find the bugs. As a Tester, we need to focus on the customer or end user requirements. We put the efforts to deliver the quality product in spite of short time frame which will further help in reducing the cost of development and test feedbacks will be implemented in the code which will avoid the defects coming from the end user.\par
Describe Use Case Testing.\par
Use Case: A use case is a description of the process which is performed by the end user for a particular task. Use case contains a sequence of step which is performed by the end user to complete a specific task or a step by step process that describe how the application and end user interact with each other. Use case is written by the user point of view.\par
\par
Use case Testing: the use case testing uses this use case to evaluate the application. So that, the tester can examines all the functionalities of the application. Use case testing cover whole application,\par
What is the purpose of test strategy?\par
We need Test Strategy for the following reasons:\par
\par
1. To have a signed, sealed, and delivered document, where the document contains details about the testing methodology, test plan, and test cases.\par
2. Test strategy document tells us how the software product will be tested.\par
3. Test strategy document helps to review the test plan with the project team members.\par
4. It describes the roles, responsibilities and the resources required for the test and schedule. \par
5. When we create a test strategy document, we have to put into writing any testing issues requiring resolution.\par
\par
The test strategy is decided first, before lower level decisions are made on the test plan, test design, and other testing issues.\par
Explain bug life cycle.\par
Bug Life Cycle:\par
\par
- When a tester finds a bug .The bug is assigned with NEW or OPEN status,\par
\par
- The bug is assigned to development project manager who will analyze the bug .He will check whether it is a valid defect. If not valid bug is rejected then status is REJECTED.\par
\par
- If not, next the defect is checked whether it is in scope. When bug is not part of the current release .Such defects are POSTPONED\par
\par
- Now, Tester checks whether a similar defect was raised earlier. If yes defect is assigned a status DUPLICATE\par
\par
- When bug is assigned to developer. During this stage bug is assigned a status IN-PROGRESS\par
\par
- Once code is fixed. Defect is assigned a status FIXED\par
\par
- Next the tester will re-test the code. In case the test case passes the defect is CLOSED\par
\par
- If the test case fails again the bug is RE-OPENED and assigned to the developer. That\rquote s all to Bug Life Cycle.\par
What is Error guessing and Error seeding?\par
Error Guessing is a test case design technique where the tester has to guess what faults might occur and to design the tests to represent them. \par
\par
Error Seeding is the process of adding known faults intentionally in a program for the reason of monitoring the rate of detection & removal and also to estimate the number of faults remaining in the program.\par
Explain Compatibility testing with an example.\par
Compatibility testing is to evaluate the application compatibility with the computing environment like Operating System, Database, Browser compatibility, backwards compatibility, computing capacity of the Hardware Platform and compatibility of the Peripherals. Example, If Compatibility testing is done on a Game application, before installing a game on a computer, its compatibility is checked with the computer specification that whether it is compatible with the computer having that much of specification or not.\par
What is Test Harness?\par
A test harness is a collection of software and test data required to test the application by running it in different testing condition like stress, load, data- driven, and monitoring its behavior and outputs. Test Harness contains two main parts:\par
\par
- Test execution engine\par
- Test script repository\par
\par
Automation testing is the use of a tool to control the execution of tests and compare the actual results with the expected results. It also involves the setting up of test pre-conditions.\par
Explain Statement coverage.\par
Statement Coverage is a metric used in White Box Testing. Statement coverage is used to ensure that all the statement in the program code is executed at least once. The advantages of Statement Coverage are:\par
\par
- Verifies that written code is correct.\par
- Measures the quality of code written.\par
- Determine the control flow of the program.\par
- To Calculate Statement Coverage:\par
- Statement Coverage = Statements Tested / Total No. of Statements.\par
What are the types of testing?\par
There are two types of testing:\par
\par
- Static testing: Static testing is a technique used in the earlier phase of the development life cycle. The code error detection and execution of program is not concern in this type of testing. Also known as non-execution technique. The Verification of the product is performed in this testing technique like Code Reviews, Inspections, Walkthroughs are mostly done in this stage of testing.\par
\par
- Dynamic testing: Dynamic Testing is concern with the execution of the software. This technique is used to test the dynamic behavior of the code. Most of the bugs are identified using this technique. These are the Validation activities. It uses different methodologies to perform testing like Unit Tests, Integration Tests, System Tests and Acceptance Testing, etc.\par
Explain User acceptance testing.\par
User Acceptance Testing (UAT) is performed by the end users on the applications before accepting the application.\par
\par
Alpha testing: is performed by the IN-House developers. After alpha testing the software is handed for the Beta testing phase, for additional testing in an environment that is similar to the client environment.\par
\par
Beta testing: is performed by the end user. So that they can make sure that the product is bug free or working as per the requirement. IN-house developers and software QA team perform alpha testing. The public, a few select prospective customers or the general public performs beta testing.\par
\par
Gamma Testing: Gamma Testing is done when the software is ready for release with specified requirements. This testing is done directly by skipping all the in-house testing activities.\par
What should be done after a bug is found?\par
After finding the bug the first step is bug to be locked in bug report. Then this bug needs to be communicated and assigned to developers that can fix it. After the bug is fixes by the developer, fixes should be re-tested, and determinations made regarding requirements for regression testing to check that fixes didn't create problems elsewhere.\par
What if the software is so buggy it can't really be tested at all?\par
In this situation is for the testers to go through the process of reporting of bugs with the focus being on critical bugs. Since this type of problem can severely affect schedules, and indicates deeper problems in the software development process project managers should be notified, and provided with some documentation.\par
What are the types of maintenance?\par
There are four types of maintenance. They are:\par
\par
- Corrective Maintenance\par
- Adaptive Maintenance\par
- Perfective Maintenance\par
- Preventive Maintenance\par
What are the advantages of waterfall model?\par
The advantages of the waterfall model are:\par
\par
- Simple to implement and required fewer amounts of resources.\par
- After every phase output is generate.\par
- Help in methods of analysis, design, coding, testing and maintenance.\par
- Preferred in projects where quality is more important than schedule and cost.\par
- Systematic and sequential model.\par
- Proper documentation of the project.\par
What is Rapid Application Development model (RAD)?\par
The RAD model Rapid Application development (RAD) is incremental software development process models that focus on the development of the project in very short time. It is enhanced version of Waterfall model. It is proposed when requirements and solutions can be made independently system or software components, which is developed by different teams. After these smaller system components are developed, they are integrated to produce the large software system solution.\par
What are the advantages of black box testing?\par
The advantages of this type of testing include:\par
\par
- Developer and tester are independent of each other.\par
- The tester does not need knowledge of any programming languages.\par
- The test is done from the point-of-view of the user.\par
- Test cases can be designed when specifications are complete.\par
- Testing helps to identify issues related to functional specifications.\par
What is software review?\par
A software review can be defined as a filter for the software engineering process. The purpose of any review is to discover errors in the analysis, design, and coding, testing and implementation phases of the software development cycle. The other purpose of a review is to see whether procedures are applied uniformly and in a manageable manner. It is used to check the process followed to develop the software is right.\par
What is reverse engineering?\par
By analyzing a final product the process of recreating a design is known as reverse engineering. Reverse engineering is the process followed in order to find difficult, unknown, and hidden information about a software system. It is important when software products lack proper documentation, and are highly unstructured, or their structure has degraded through a series of maintenance efforts. Maintenance activities cannot be performed without a complete understanding of the software system.\par
What is data flow diagram?\par
The Data Flow Diagram gives us information of the flow of data within the application.\par
\par
- The DFD can be used to analyze the design of the application.\par
- It is a graphical representation of the structure of the data.\par
- A developer draws context level DFD first showing interaction between the different components of the application.\par
- DFD help in developing the software by clarifying the requirements and major functionalities.\par
- DFDs show the flow of data through a system.\par
- It is an important modeling tool that allows us to picture a system as a network of functional processes.\par
What is exploratory testing?\par
Exploratory testing: means testing an application without a test plan and test script. In exploring testing test explore the application on the basis on his knowledge. The tester has no knowledge about the application previously. He explores the application like an end user and try to use it. While using the application his main motive is to find the bugs which are in the application.\par
What is compatibility testing?\par
Compatibility testing is a type of testing used to find out the compatibility between the application and platform on which application works, web browsers, hardware, operating systems etc. Good software must be compatible with different hardware, web browser and database.\par
What is SRS and BRS document?\par
Software Requirements Specification (SRS) is documented form of the requirement of the customer. It consists of all requirement of the customer regarding that software to be developed. The SRS document work as agreement between the company and the customer consisting of all functional and non functional requirements.\par
\par
Business Requirement Specification (BRS) are the requirements as described by the business people. The business tells \ldblquote what\rdblquote  they want for the application to do. In simple word BRS contain the functional requirement of the application.\par
Can you explain V model in manual testing?\par
V model: it is enhanced version of waterfall model where each level of the development lifecycle is verified before moving to next level. In this testing starts at the very beginning. By testing we mean verification by means of reviews and inspections, static testing. Each level of the development life - cycle has a corresponding test plan. A test plan is developed to prepare for the testing of the products of that phase. Be developing the test plans, we can also define the expected results for testing of the products for that level as well as defining the entry and exit criteria for each level.\par
What is Concurrency Testing?\par
Concurrency Testing is used to know the effects of using the software by different users at the same time. In this type of testing we have multiple users performing the exact same requests at the same time. It helps in identifying and measuring the problems in Response time, levels of locking and deadlocking in the application. For this we use Load runner to create VUGen (Virtual User Generator) is used to add the number of concurrent users and perform operation on the application on the same time.\par
What is an inspection in software testing?\par
An inspection is more formalized than a walkt hrough. Inspection technique involves 3 to 8 team member consisting of a moderator, reader, and a recorder to take notes. The subject of the inspection is typically a document such as a requirements or a test plan, and the purpose is to find problems and see what is missing, most problems will be found during this preparation. The result of the inspection meeting should be a written report. It is one of the most cost effective methods of ensuring quality.\par
A Form has four mandatory fields to be entered before you Submit. How many numbers of test cases are required to verify this? And what are they?\par
Five test cases are required to test:\par
\par
1. Enter the data in all the mandatory fields and submit, should not display error message.\par
2. Enter data in any two mandatory fields and summit, should issue an error message.\par
3. Do not enter in any of the fields should issue an error message.\par
4. If the fields accept only number, enter numbers in the fields and submit, should not issue an error message, try to enter only in two fields should issue an error message, and enter alphabets in two fields and number in other two fields it should issue an error message.\par
5. If the fields do not accept special characters, then enter the characters and submit it.\par
What is Cyclomatic Complexity?\par
Cyclomatic complexity is used to measure the complexity of the software using the control flow graph of the software. It is a graphical representation, consisting of following:\par
\par
NODE: statement of the program is taken as node of the graph.\par
\par
Edges: the flow of command is denoted by edges. Edges are used to connect two node , this show flow of control from one node to other node in the program.\par
\par
Using this node and edges we calculate the complexity of the program.\par
This determines the minimum number of inputs you need to test always to execute the program.\par
}
 